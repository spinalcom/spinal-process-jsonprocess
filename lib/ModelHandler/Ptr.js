"use strict";

// Generated by CoffeeScript 2.3.1
(function () {
  var G_root;

  require("spinal-core-connectorjs");

  G_root = typeof window === "undefined" ? global : window;

  module.exports = {
    modelType: G_root.Ptr,
    modelName: "Ptr",
    prority: 1,
    handler: function handler() {
      var _this = this;

      var _json, _model;
      _json = this._json;
      _model = this._model;
      if (this._load_ptr === true) {
        if (_model.data.value === 0) {
          _json.data = {
            _server_id: _model.data.value
          };
          return Promise.resolve(_json);
        }
        return new Promise(function (resolve, reject) {
          return _model.load(function (ptr) {
            if (ptr) {
              return resolve(ptr);
            } else {
              return reject("Load error: " + _model._server_id);
            }
          });
        }).then(function (m) {
          return G_root.JsonProcess._assignWithModel.call(_this, _this._json, "data", m);
        }, function (error) {
          return console.error(error);
        });
      } else {
        _json.data = {
          _server_id: _model.data.value
        };
        return Promise.resolve(_json);
      }
    },
    /**
    * handler to "update" the max_depth of children
    * Optionnal, if  not definied will use the default one (Model / Lst / Ptr)
    * @returns a promise with the _json in the resolve
     */
    set_children_depth_handler: function set_children_depth_handler(_json, new_max_depth) {
      var process;
      process = G_root.JsonProcess._getJsonProcess(_json);
      if (process._max_depth < new_max_depth) {
        process._max_depth = new_max_depth;
        process._is_rdy = process._update();
      }
      return process._is_rdy.then(function () {
        return process._json;
      });
    }
  };
}).call(undefined);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9Nb2RlbEhhbmRsZXIvUHRyLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxDQUFBLFlBQUE7QUFBQSxNQUFBLE1BQUE7O0FBQUEsVUFBQSx5QkFBQTs7QUFDQSxXQUFZLE9BQUEsTUFBQSxLQUFILFdBQUcsR0FBSCxNQUFHLEdBQThDLE1BQTFEOztBQUVBLFNBQUEsT0FBQSxHQUFpQjtBQUNmLGVBQVcsT0FESSxHQUFBO0FBRWYsZUFGZSxLQUFBO0FBR2YsYUFIZSxDQUFBO0FBS2YsYUFBUyxtQkFBQTtBQUFBOztBQUNQLFVBQUEsS0FBQSxFQUFBLE1BQUE7QUFBQSxjQUFRLEtBQUMsS0FBVDtBQUNBLGVBQVMsS0FBQyxNQUFWO0FBQ0EsVUFBRyxLQUFBLFNBQUEsS0FBSCxJQUFBLEVBQUE7QUFDRSxZQUFJLE9BQU8sSUFBUCxDQUFBLEtBQUEsS0FBSixDQUFBLEVBQUE7QUFDRSxnQkFBQSxJQUFBLEdBQWE7QUFDVCx3QkFBWSxPQUFPLElBQVAsQ0FBWTtBQURmLFdBQWI7QUFHQSxpQkFBTyxRQUFBLE9BQUEsQ0FKVCxLQUlTLENBQVA7O0FBQ0YsZUFBUyxJQUFBLE9BQUEsQ0FBWSxVQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUE7aUJBQ25CLE9BQUEsSUFBQSxDQUFZLFVBQUEsR0FBQSxFQUFBO0FBQ1YsZ0JBQUEsR0FBQSxFQUFBO3FCQUNFLFFBREYsR0FDRSxDO0FBREYsYUFBQSxNQUFBO3FCQUdFLE9BQU8saUJBQWlCLE9BSDFCLFVBR0UsQzs7QUFKSixXQUFBLEM7QUFETSxTQUFDLENBQUQsQ0FBQSxJQUFBLENBUUYsVUFBQSxDQUFBLEVBQUE7QUFDSixpQkFBTyxPQUFPLFdBQVAsQ0FBbUIsZ0JBQW5CLENBQUEsSUFBQSxDQUFBLEtBQUEsRUFBNEMsTUFBNUMsS0FBQSxFQUFBLE1BQUEsRUFBQSxDQUFBLENBQVA7QUFUTSxTQUFBLEVBVU4sVUFBQSxLQUFBLEVBQUE7aUJBQVcsUUFBQSxLQUFBLENBQUEsS0FBQSxDO0FBaEJmLFNBTVUsQ0FBUjtBQU5GLE9BQUEsTUFBQTtBQWtCRSxjQUFBLElBQUEsR0FBYTtBQUNULHNCQUFZLE9BQU8sSUFBUCxDQUFZO0FBRGYsU0FBYjtBQUdBLGVBQU8sUUFBQSxPQUFBLENBckJULEtBcUJTLENBQVA7O0FBN0JXLEtBQUE7Ozs7OztBQW9DZixnQ0FBNEIsb0NBQUEsS0FBQSxFQUFBLGFBQUEsRUFBQTtBQUMxQixVQUFBLE9BQUE7QUFBQSxnQkFBVSxPQUFPLFdBQVAsQ0FBQSxlQUFBLENBQUEsS0FBQSxDQUFWO0FBQ0EsVUFBSSxRQUFBLFVBQUEsR0FBSixhQUFBLEVBQUE7QUFDRSxnQkFBQSxVQUFBLEdBQXFCLGFBQXJCO0FBQ0EsZ0JBQUEsT0FBQSxHQUFrQixRQUZwQixPQUVvQixFQUFsQjs7QUFDRixhQUFPLFFBQVEsT0FBUixDQUFBLElBQUEsQ0FBcUIsWUFBQTtBQUMxQixlQUFPLFFBQVEsS0FBZjtBQURLLE9BQUEsQ0FBUDtBQUwwQjtBQXBDYixHQUFqQjtDQUhBLEUsSUFBQSIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoXCJzcGluYWwtY29yZS1jb25uZWN0b3Jqc1wiKVxuR19yb290ID0gaWYgdHlwZW9mIHdpbmRvdyA9PSBcInVuZGVmaW5lZFwiIHRoZW4gZ2xvYmFsIGVsc2Ugd2luZG93XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBtb2RlbFR5cGU6IEdfcm9vdC5QdHIsXG4gIG1vZGVsTmFtZTogXCJQdHJcIixcbiAgcHJvcml0eTogMVxuXG4gIGhhbmRsZXI6ICgpIC0+XG4gICAgX2pzb24gPSBAX2pzb25cbiAgICBfbW9kZWwgPSBAX21vZGVsXG4gICAgaWYgQF9sb2FkX3B0ciA9PSB0cnVlXG4gICAgICBpZiAoX21vZGVsLmRhdGEudmFsdWUgPT0gMClcbiAgICAgICAgX2pzb24uZGF0YSA9IHtcbiAgICAgICAgICAgIF9zZXJ2ZXJfaWQ6IF9tb2RlbC5kYXRhLnZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShfanNvbilcbiAgICAgIHJldHVybiAoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpIC0+XG4gICAgICAgIF9tb2RlbC5sb2FkKChwdHIpIC0+XG4gICAgICAgICAgaWYgcHRyXG4gICAgICAgICAgICByZXNvbHZlKHB0cilcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZWplY3QoXCJMb2FkIGVycm9yOiBcIiArIF9tb2RlbC5fc2VydmVyX2lkKVxuICAgICAgICApXG4gICAgICApKVxuICAgICAgLnRoZW4oKG0pID0+XG4gICAgICAgIHJldHVybiBHX3Jvb3QuSnNvblByb2Nlc3MuX2Fzc2lnbldpdGhNb2RlbC5jYWxsKEAsIEBfanNvbiwgXCJkYXRhXCIsIG0pXG4gICAgICAsIChlcnJvcikgLT4gY29uc29sZS5lcnJvciBlcnJvcikpXG4gICAgZWxzZVxuICAgICAgX2pzb24uZGF0YSA9IHtcbiAgICAgICAgICBfc2VydmVyX2lkOiBfbW9kZWwuZGF0YS52YWx1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShfanNvbilcblxuICAjIyMqXG4gICogaGFuZGxlciB0byBcInVwZGF0ZVwiIHRoZSBtYXhfZGVwdGggb2YgY2hpbGRyZW5cbiAgKiBPcHRpb25uYWwsIGlmICBub3QgZGVmaW5pZWQgd2lsbCB1c2UgdGhlIGRlZmF1bHQgb25lIChNb2RlbCAvIExzdCAvIFB0cilcbiAgKiBAcmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgX2pzb24gaW4gdGhlIHJlc29sdmVcbiAgIyMjXG4gIHNldF9jaGlsZHJlbl9kZXB0aF9oYW5kbGVyOiAoX2pzb24sIG5ld19tYXhfZGVwdGgpIC0+XG4gICAgcHJvY2VzcyA9IEdfcm9vdC5Kc29uUHJvY2Vzcy5fZ2V0SnNvblByb2Nlc3MoX2pzb24pXG4gICAgaWYgKHByb2Nlc3MuX21heF9kZXB0aCA8IG5ld19tYXhfZGVwdGgpXG4gICAgICBwcm9jZXNzLl9tYXhfZGVwdGggPSBuZXdfbWF4X2RlcHRoXG4gICAgICBwcm9jZXNzLl9pc19yZHkgPSBwcm9jZXNzLl91cGRhdGUoKVxuICAgIHJldHVybiBwcm9jZXNzLl9pc19yZHkudGhlbigoKSAtPlxuICAgICAgcmV0dXJuIHByb2Nlc3MuX2pzb25cbiAgICApXG59Il0sInNvdXJjZVJvb3QiOiIuLi8uLiJ9
//# sourceURL=/home/laurent/share_to_send/modules/spinal-process-jsonprocess/src/ModelHandler/Ptr.coffee