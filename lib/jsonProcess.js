"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Generated by CoffeeScript 2.3.1
(function () {
  // Copyright 2015 SpinalCom - www.spinalcom.com

  // This file is part of SpinalCore.

  // Please read all of the following terms and conditions
  // of the Free Software license Agreement ("Agreement")
  // carefully.

  // This Agreement is a legally binding contract between
  // the Licensee (as defined below) and SpinalCom that
  // sets forth the terms and conditions that govern your
  // use of the Program. By installing and/or using the
  // Program, you agree to abide by all the terms and
  // conditions stated or referenced herein.

  // If you do not agree to abide by these terms and
  // conditions, do not demonstrate your acceptance and do
  // not install or use the Program.

  // You should have received a copy of the license along
  // with this file. If not, see
  // <http://resources.spinalcom.com/licenses.pdf>.
  var G_root;

  G_root = typeof window === "undefined" ? global : window;

  require("spinal-core-connectorjs");

  G_root.JsonProcess = function () {
    /**
     * Utility process to create a json like object always synchronized with the SpinalHub server.
     *
     * h3 The Model NEEDS to be synchonized with the spinalhub server.
     *
     * Usage Example:
     *
     * ```sh
     *   npm i --save spinal-process-jsonprocess
     * ```
     *
     * ```js
     * var spinalCore = require("spinal-core-connectorjs");
     *
     * var JsonProcess = require("spinal-process-jsonprocess").JsonProcess;
     * var create_JsonProcess = require("spinal-process-jsonprocess").create_JsonProcess;
     * // or for es6
     * // import { JsonProcess, create_JsonProcess } from "spinal-process-jsonprocess"
     * // or
     * // import create_JsonProcess from "spinal-process-jsonprocess"
     * // import { JsonProcess } from "spinal-process-jsonprocess"
     *
     *
     * const connect_opt = "http://168:JHGgcz45JKilmzknzelf65ddDadggftIO98P@localhost:7777/";
     *
     * var conn = spinalCore.connect(connect_opt);
     * spinalCore.load(conn, "__users__", callback_success);
     *
     * function callback_success(file) {
     *
     *   JsonProcess(file, 3, false)
     *     .then(_process => {
     *       JsonProcess.setOnLocalChange(json, (json) => {
     *         console.log("the model have a local change !", json);
     *       });
     *
     *       // carefull circular Json doesn't
     *       // work with JSON.stringify
     *       console.log(JSON.stringify(_process, null, 2));
     *     })
     *     .catch(console.error);
     *
     * };
     * ```
     * @see to create an JsonProcess instance use
     * `create_JsonProcess` or `create_JsonProcess_by_server_id`
     * @class JsonProcess
     */
    var JsonProcess = function (_G_root$Process) {
      _inherits(JsonProcess, _G_root$Process);

      /**
      * h4 /!\ **Don't use the Contructor directly but use the following static method :**
      * * `create_JsonProcess`
      * * `create_JsonProcess_by_server_id`
       */
      function JsonProcess(model, max_depth, load_ptr, depth) {
        _classCallCheck(this, JsonProcess);

        var handler, i, len, ref;

        var _this = _possibleConstructorReturn(this, (JsonProcess.__proto__ || Object.getPrototypeOf(JsonProcess)).call(this, model, false));

        _this._model = model;
        _this._depth = depth;
        _this._max_depth = max_depth;
        _this._load_ptr = load_ptr;
        _this._json = {
          _server_id: model._server_id,
          _constructor_name: model.constructor.name,
          data: null
        };
        _this.handler = null;
        ref = G_root.JsonProcess._type_handler;
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          if (_this._model instanceof handler.modelType) {
            _this.handler = handler.handler;
            break;
          }
        }
        if (_this.handler === null) {
          // it shouldn't happend
          throw new Error("jsonProcess, imposible to find an handle for " + _this._model.constructor.name);
        }
        _this._onChange = [];
        _this._onLocalChange = [];
        _this._onChildChange = [];
        // wait rdy
        _this._is_rdy = _this._update();
        return _this;
      }

      /**
      * Static Method to create a JsonProcess
      * @param model [Model] SpinalCore model to follow
      * @param max_depth [Number = null] the max depth default is depth + 2
      * @param load_ptr [Bool = false] to load or not the ptr
      * @param depth [Number = 0] current depth default at 0
      * @returns [Promise] the `_json` attribute is returned when resolved
       */


      _createClass(JsonProcess, [{
        key: "_update",
        value: function _update() {
          if (this._max_depth < this._depth) {
            return Promise.resolve({
              _server_id: this._json._server_id,
              _constructor_name: this._model.constructor.name
            });
          }
          return this.handler.call(this);
        }

        /**
        * Register a custom handler, check [Lst](/src/ModelHandler/Lst.coffee)
        * or [Model](/src/ModelHandler/Model.coffee) handler
        * @param {Object} handler the handler
        *
        *```js
        * // example for Obj
        * {
        *   modelType: G_root.Obj, // [Model] The declaration of the Model
        *   modelName: "Obj", // [String] The constructor name of the Model
        *   prority: 1, // [Number] the defaut handler executed is the one with the highiest priority
        *
        *   // [Function] The handler itself return a promise with the _json in the resolve
        *   handler: function() {
        *     this._json.data = this._model._data
        *     return Promise.resolve(this._json)
        *     }
        * }
        *```   */

      }, {
        key: "onchange",
        value: function onchange() {
          var _this2 = this;

          // _update json
          if (this._model.has_been_directly_modified()) {
            return this._update().then(function () {
              G_root.JsonProcess._callbackInArray(_this2._onLocalChange, _this2._json);
              return G_root.JsonProcess._callbackInArray(_this2._onChange, _this2._json);
            });
          } else {
            G_root.JsonProcess._callbackInArray(this._onChildChange, this._json);
            return G_root.JsonProcess._callbackInArray(this._onChange, this._json);
          }
        }
      }], [{
        key: "create_JsonProcess",
        value: function create_JsonProcess(model) {
          var max_depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var load_ptr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

          depth += 1;
          if (!max_depth) {
            max_depth = depth + 2;
          }
          // wait model rdy
          return G_root.JsonProcess._wait_model_sync_server(model).then(function () {
            if (typeof G_root.JsonProcess._getJsonProcess(model) === "undefined") {
              G_root.JsonProcess._JsonProcess[model._server_id] = new G_root.JsonProcess(model, max_depth, load_ptr, depth);
            }
            return G_root.JsonProcess._getJsonProcess(model)._is_rdy;
          });
        }

        /**
        * Static Method to create a JsonProcess
        * @param server_id [Number] SpinalCore model to follow
        * @param max_depth [Number = null] the max depth default is depth + 2
        * @param load_ptr [Bool = false] to load or not the ptr
        * @param depth [Number = 0] current depth default at 0
        * @returns [Promise] the `_json` attribute is returned when resolved
         */

      }, {
        key: "create_JsonProcess_by_server_id",
        value: function create_JsonProcess_by_server_id(server_id, max_depth, load_ptr, depth) {
          return G_root.JsonProcess.create_JsonProcess(FileSystem._objects[server_id], _max_depth, load_ptr, depth);
        }

        /**
        * Add a callback to call on Model change (itself and child)
        * @param {Obj} json the Json or a child obtained via create_JsonProcess MUST have a `_server_id`
        * @param {Function} cb the function to be called
        * @returns {Function} call it to unregister the callback
        * @api private
         */

      }, {
        key: "setOnChange",
        value: function setOnChange(json, cb) {
          var targetJsonProcess;
          targetJsonProcess = G_root.JsonProcess._getJsonProcess(json);
          return G_root.JsonProcess._registerCallback(targetJsonProcess._onChange, cb);
        }

        /**
        * Add a callback to call on Model change (itself only)
        * @param {Obj} json the Json or a child obtained via create_JsonProcess MUST have a `_server_id`
        * @param {Function} cb the function to be called
        * @returns {Function} call it to unregister the callback
         */

      }, {
        key: "setOnLocalChange",
        value: function setOnLocalChange(json, cb) {
          var targetJsonProcess;
          targetJsonProcess = G_root.JsonProcess._getJsonProcess(json);
          return G_root.JsonProcess._registerCallback(targetJsonProcess._onLocalChange, cb);
        }

        /**
        * Add a callback to call on Model change (child only)
        * @param {Obj} json the Json or a child obtained via create_JsonProcess MUST have a `_server_id`
        * @param {Function} cb the function to be called
        * @returns {Function} call it to unregister the callback
         */

      }, {
        key: "setOnChildChange",
        value: function setOnChildChange(json, cb) {
          var targetJsonProcess;
          targetJsonProcess = G_root.JsonProcess._getJsonProcess(json);
          return G_root.JsonProcess._registerCallback(targetJsonProcess._onChildChange, cb);
        }
      }, {
        key: "_getJsonProcess",
        value: function _getJsonProcess(obj) {
          if (obj && obj._server_id) {
            return G_root.JsonProcess._JsonProcess[model._server_id];
          }
          throw new Error("_getJsonProcess paramaeter must have a '_server_id' attribute");
        }
      }, {
        key: "registerHandler",
        value: function registerHandler(handler) {
          G_root.JsonProcess._type_handler.push(handler);
          return G_root.JsonProcess._type_handler.sort(G_root.JsonProcess._register_sort);
        }
      }, {
        key: "_register_sort",
        value: function _register_sort(a, b) {
          return b.prority - a.prority;
        }
      }, {
        key: "_assignWithKey",
        value: function _assignWithKey(_data, model_key, _model) {
          return G_root.JsonProcess._assignWithModel.call(this, _data, model_key, _model[model_key]);
        }
      }, {
        key: "_assignWithModel",
        value: function _assignWithModel(_data, model_key, _model) {
          return G_root.JsonProcess.create_JsonProcess(_model, this._max_depth, this._load_ptr, this._depth).then(function (child) {
            _data[model_key] = child;
            return _data;
          });
        }
      }, {
        key: "_assignPush",
        value: function _assignPush(_json, _model) {
          return G_root.JsonProcess.create_JsonProcess(_model, this._max_depth, this._load_ptr, this._depth).then(function (child) {
            _json.data.push(child);
            return _json;
          });
        }
      }, {
        key: "_callbackInArray",
        value: function _callbackInArray(arr, json) {
          var i, len, obj, results;
          results = [];
          for (i = 0, len = arr.length; i < len; i++) {
            obj = arr[i];
            results.push(obj.func(json));
          }
          return results;
        }
      }, {
        key: "_registerCallback",
        value: function _registerCallback(arr, cb) {
          var obj;
          obj = {
            id: G_root.JsonProcess._registerID++,
            func: cb
          };
          return function () {
            var idx;
            idx = arr.indexOf(obj);
            if (idx !== -1) {
              return arr.splice(idx, 1);
            }
          };
        }
      }, {
        key: "_wait_model_sync_server_loop",
        value: function _wait_model_sync_server_loop(model, resolve) {
          if (typeof model._server_id === 'undefined' || typeof FileSystem._tmp_objects[model._server_id] !== 'undefined' || typeof FileSystem._objects[model._server_id] === 'undefined') {
            return setTimeout(function () {
              return G_root.JsonProcess._wait_model_sync_server_loop(model, resolve);
            }, 200);
          } else {
            return resolve();
          }
        }
      }, {
        key: "_wait_model_sync_server",
        value: function _wait_model_sync_server(model) {
          return new Promise(function (resolve) {
            return G_root.JsonProcess._wait_model_sync_server_loop(model, resolve);
          });
        }
      }]);

      return JsonProcess;
    }(G_root.Process);

    ;

    JsonProcess._type_handler = [];

    JsonProcess._JsonProcess = [];

    JsonProcess._registerID = 0;

    return JsonProcess;
  }.call(this);

  module.exports = {
    JsonProcess: JsonProcess,
    create_JsonProcess: JsonProcess.create_JsonProcess,
    default: JsonProcess.create_JsonProcess
  };
}).call(undefined);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qc29uUHJvY2Vzcy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxDQUFBLFlBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE1BQUEsTUFBQTs7QUF3QkEsV0FBWSxPQUFBLE1BQUEsS0FBSCxXQUFHLEdBQUgsTUFBRyxHQUE4QyxNQUExRDs7QUFDQSxVQUFBLHlCQUFBOztBQWtETSxTQUFPLFdBQVAsR0FBTyxZQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsUUFBYixXQUFhO0FBQUE7Ozs7Ozs7QUFVWCwyQkFBYSxLQUFiLEVBQWEsU0FBYixFQUFhLFFBQWIsRUFBYSxLQUFiLEVBQWE7QUFBQTs7QUFDWCxZQUFBLE9BQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUE7O0FBRFcsOEhBQ1gsS0FEVyxFQUNYLEtBRFc7O0FBRVgsY0FBQSxNQUFBLEdBQVUsS0FBVjtBQUNBLGNBQUEsTUFBQSxHQUFVLEtBQVY7QUFDQSxjQUFBLFVBQUEsR0FBYyxTQUFkO0FBQ0EsY0FBQSxTQUFBLEdBQWEsUUFBYjtBQUNBLGNBQUEsS0FBQSxHQUFTO0FBQ1Asc0JBQVksTUFETCxVQUFBO0FBRVAsNkJBQW1CLE1BQU0sV0FBTixDQUZaLElBQUE7QUFHUCxnQkFBTTtBQUhDLFNBQVQ7QUFLQSxjQUFBLE9BQUEsR0FBVyxJQUFYO0FBQ0EsY0FBQSxPQUFBLFdBQUEsQ0FBQSxhQUFBO0FBQUEsYUFBQSxJQUFBLENBQUEsRUFBQSxNQUFBLElBQUEsTUFBQSxFQUFBLElBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQTs7QUFDRSxjQUFJLE1BQUEsTUFBQSxZQUFtQixRQUF2QixTQUFBLEVBQUE7QUFDRSxrQkFBQSxPQUFBLEdBQVcsUUFBUSxPQUFuQjtBQURGOztBQURGO0FBSUEsWUFBSSxNQUFBLE9BQUEsS0FBSixJQUFBLEVBQUE7O0FBRUUsZ0JBQU0sSUFBQSxL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REYsQ0FDRSxDOztBQUhHLFdBQVA7QUFMa0I7QUE5S1Q7QUFBQTtBQUFBLHFEQXdMb0IsS0F4THBCLEVBd0xvQixPQXhMcEIsRUF3TG9CO0FBQzdCLGNBQUksT0FBTyxNQUFQLFVBQUEsS0FBQSxXQUFBLElBQ0osT0FBTyxXQUFXLFlBQVgsQ0FBd0IsTUFBL0IsVUFBTyxDQUFQLEtBREksV0FBQSxJQUVKLE9BQU8sV0FBVyxRQUFYLENBQW9CLE1BQTNCLFVBQU8sQ0FBUCxLQUZBLFdBQUEsRUFBQTttQkFHRSxXQUNFLFlBQUE7cUJBQU0sT0FBTyxXQUFQLENBQUEsNEJBQUEsQ0FBQSxLQUFBLEVBQUEsT0FBQSxDO0FBRFIsYUFBQSxFQUhGLEdBR0UsQztBQUhGLFdBQUEsTUFBQTttQkFBQSxTOztBQUQ2QjtBQXhMcEI7QUFBQTtBQUFBLGdEQWtNZSxLQWxNZixFQWtNZTtBQUN4QixpQkFBTyxJQUFBLE9BQUEsQ0FBWSxVQUFBLE9BQUEsRUFBQTttQkFDakIsT0FBTyxXQUFQLENBQUEsNEJBQUEsQ0FBQSxLQUFBLEVBQUEsT0FBQSxDO0FBREssV0FBQSxDQUFQO0FBRHdCO0FBbE1mOztBQUFBO0FBQUEsTUFBb0IsT0FBakMsT0FBYTs7QUFBYjs7QUFDRSxnQkFBQSxhQUFBLEdBQWdCLEVBQWhCOztBQUNBLGdCQUFBLFlBQUEsR0FBZSxFQUFmOztBQUNBLGdCQUFBLFdBQUEsR0FBYyxDQUFkOzs7R0FIVyxDLElBQUEsQyxJQUFBLENBQVA7O0FBd01OLFNBQUEsT0FBQSxHQUFpQjtBQUFBLDRCQUFBO0FBRWYsd0JBQW9CLFlBRkwsa0JBQUE7QUFHZixhQUFTLFlBQVk7QUFITixHQUFqQjtDQW5SQSxFLElBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjIENvcHlyaWdodCAyMDE1IFNwaW5hbENvbSAtIHd3dy5zcGluYWxjb20uY29tXG4jXG4jIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIFNwaW5hbENvcmUuXG4jXG4jIFBsZWFzZSByZWFkIGFsbCBvZiB0aGUgZm9sbG93aW5nIHRlcm1zIGFuZCBjb25kaXRpb25zXG4jIG9mIHRoZSBGcmVlIFNvZnR3YXJlIGxpY2Vuc2UgQWdyZWVtZW50IChcIkFncmVlbWVudFwiKVxuIyBjYXJlZnVsbHkuXG4jXG4jIFRoaXMgQWdyZWVtZW50IGlzIGEgbGVnYWxseSBiaW5kaW5nIGNvbnRyYWN0IGJldHdlZW5cbiMgdGhlIExpY2Vuc2VlIChhcyBkZWZpbmVkIGJlbG93KSBhbmQgU3BpbmFsQ29tIHRoYXRcbiMgc2V0cyBmb3J0aCB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgdGhhdCBnb3Zlcm4geW91clxuIyB1c2Ugb2YgdGhlIFByb2dyYW0uIEJ5IGluc3RhbGxpbmcgYW5kL29yIHVzaW5nIHRoZVxuIyBQcm9ncmFtLCB5b3UgYWdyZWUgdG8gYWJpZGUgYnkgYWxsIHRoZSB0ZXJtcyBhbmRcbiMgY29uZGl0aW9ucyBzdGF0ZWQgb3IgcmVmZXJlbmNlZCBoZXJlaW4uXG4jXG4jIElmIHlvdSBkbyBub3QgYWdyZWUgdG8gYWJpZGUgYnkgdGhlc2UgdGVybXMgYW5kXG4jIGNvbmRpdGlvbnMsIGRvIG5vdCBkZW1vbnN0cmF0ZSB5b3VyIGFjY2VwdGFuY2UgYW5kIGRvXG4jIG5vdCBpbnN0YWxsIG9yIHVzZSB0aGUgUHJvZ3JhbS5cbiNcbiMgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgbGljZW5zZSBhbG9uZ1xuIyB3aXRoIHRoaXMgZmlsZS4gSWYgbm90LCBzZWVcbiMgPGh0dHA6Ly9yZXNvdXJjZXMuc3BpbmFsY29tLmNvbS9saWNlbnNlcy5wZGY+LlxuXG5cbkdfcm9vdCA9IGlmIHR5cGVvZiB3aW5kb3cgPT0gXCJ1bmRlZmluZWRcIiB0aGVuIGdsb2JhbCBlbHNlIHdpbmRvd1xucmVxdWlyZShcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzXCIpXG5cbiMjIypcbiAqIFV0aWxpdHkgcHJvY2VzcyB0byBjcmVhdGUgYSBqc29uIGxpa2Ugb2JqZWN0IGFsd2F5cyBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgU3BpbmFsSHViIHNlcnZlci5cbiAqXG4gKiBoMyBUaGUgTW9kZWwgTkVFRFMgdG8gYmUgc3luY2hvbml6ZWQgd2l0aCB0aGUgc3BpbmFsaHViIHNlcnZlci5cbiAqXG4gKiBVc2FnZSBFeGFtcGxlOlxuICpcbiAqIGBgYHNoXG4gKiAgIG5wbSBpIC0tc2F2ZSBzcGluYWwtcHJvY2Vzcy1qc29ucHJvY2Vzc1xuICogYGBgXG4gKlxuICogYGBganNcbiAqIHZhciBzcGluYWxDb3JlID0gcmVxdWlyZShcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzXCIpO1xuICpcbiAqIHZhciBKc29uUHJvY2VzcyA9IHJlcXVpcmUoXCJzcGluYWwtcHJvY2Vzcy1qc29ucHJvY2Vzc1wiKS5Kc29uUHJvY2VzcztcbiAqIHZhciBjcmVhdGVfSnNvblByb2Nlc3MgPSByZXF1aXJlKFwic3BpbmFsLXByb2Nlc3MtanNvbnByb2Nlc3NcIikuY3JlYXRlX0pzb25Qcm9jZXNzO1xuICogLy8gb3IgZm9yIGVzNlxuICogLy8gaW1wb3J0IHsgSnNvblByb2Nlc3MsIGNyZWF0ZV9Kc29uUHJvY2VzcyB9IGZyb20gXCJzcGluYWwtcHJvY2Vzcy1qc29ucHJvY2Vzc1wiXG4gKiAvLyBvclxuICogLy8gaW1wb3J0IGNyZWF0ZV9Kc29uUHJvY2VzcyBmcm9tIFwic3BpbmFsLXByb2Nlc3MtanNvbnByb2Nlc3NcIlxuICogLy8gaW1wb3J0IHsgSnNvblByb2Nlc3MgfSBmcm9tIFwic3BpbmFsLXByb2Nlc3MtanNvbnByb2Nlc3NcIlxuICpcbiAqXG4gKiBjb25zdCBjb25uZWN0X29wdCA9IFwiaHR0cDovLzE2ODpKSEdnY3o0NUpLaWxtemtuemVsZjY1ZGREYWRnZ2Z0SU85OFBAbG9jYWxob3N0Ojc3NzcvXCI7XG4gKlxuICogdmFyIGNvbm4gPSBzcGluYWxDb3JlLmNvbm5lY3QoY29ubmVjdF9vcHQpO1xuICogc3BpbmFsQ29yZS5sb2FkKGNvbm4sIFwiX191c2Vyc19fXCIsIGNhbGxiYWNrX3N1Y2Nlc3MpO1xuICpcbiAqIGZ1bmN0aW9uIGNhbGxiYWNrX3N1Y2Nlc3MoZmlsZSkge1xuICpcbiAqICAgSnNvblByb2Nlc3MoZmlsZSwgMywgZmFsc2UpXG4gKiAgICAgLnRoZW4oX3Byb2Nlc3MgPT4ge1xuICogICAgICAgSnNvblByb2Nlc3Muc2V0T25Mb2NhbENoYW5nZShqc29uLCAoanNvbikgPT4ge1xuICogICAgICAgICBjb25zb2xlLmxvZyhcInRoZSBtb2RlbCBoYXZlIGEgbG9jYWwgY2hhbmdlICFcIiwganNvbik7XG4gKiAgICAgICB9KTtcbiAqXG4gKiAgICAgICAvLyBjYXJlZnVsbCBjaXJjdWxhciBKc29uIGRvZXNuJ3RcbiAqICAgICAgIC8vIHdvcmsgd2l0aCBKU09OLnN0cmluZ2lmeVxuICogICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoX3Byb2Nlc3MsIG51bGwsIDIpKTtcbiAqICAgICB9KVxuICogICAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAqXG4gKiB9O1xuICogYGBgXG4gKiBAc2VlIHRvIGNyZWF0ZSBhbiBKc29uUHJvY2VzcyBpbnN0YW5jZSB1c2VcbiAqIGBjcmVhdGVfSnNvblByb2Nlc3NgIG9yIGBjcmVhdGVfSnNvblByb2Nlc3NfYnlfc2VydmVyX2lkYFxuICogQGNsYXNzIEpzb25Qcm9jZXNzXG4jIyNcbmNsYXNzIEdfcm9vdC5Kc29uUHJvY2VzcyBleHRlbmRzIEdfcm9vdC5Qcm9jZXNzXG4gIEBfdHlwZV9oYW5kbGVyOiBbXVxuICBAX0pzb25Qcm9jZXNzOiBbXVxuICBAX3JlZ2lzdGVySUQ6IDBcblxuICAjIyMqXG4gICogaDQgLyFcXCAqKkRvbid0IHVzZSB0aGUgQ29udHJ1Y3RvciBkaXJlY3RseSBidXQgdXNlIHRoZSBmb2xsb3dpbmcgc3RhdGljIG1ldGhvZCA6KipcbiAgKiAqIGBjcmVhdGVfSnNvblByb2Nlc3NgXG4gICogKiBgY3JlYXRlX0pzb25Qcm9jZXNzX2J5X3NlcnZlcl9pZGBcbiAgIyMjXG4gIGNvbnN0cnVjdG9yOiAobW9kZWwsIG1heF9kZXB0aCwgbG9hZF9wdHIsIGRlcHRoKSAtPlxuICAgIHN1cGVyIG1vZGVsLCBmYWxzZVxuICAgIEBfbW9kZWwgPSBtb2RlbFxuICAgIEBfZGVwdGggPSBkZXB0aFxuICAgIEBfbWF4X2RlcHRoID0gbWF4X2RlcHRoXG4gICAgQF9sb2FkX3B0ciA9IGxvYWRfcHRyXG4gICAgQF9qc29uID0ge1xuICAgICAgX3NlcnZlcl9pZDogbW9kZWwuX3NlcnZlcl9pZFxuICAgICAgX2NvbnN0cnVjdG9yX25hbWU6IG1vZGVsLmNvbnN0cnVjdG9yLm5hbWUsXG4gICAgICBkYXRhOiBudWxsXG4gICAgfVxuICAgIEBoYW5kbGVyID0gbnVsbFxuICAgIGZvciBoYW5kbGVyIGluIEdfcm9vdC5Kc29uUHJvY2Vzcy5fdHlwZV9oYW5kbGVyXG4gICAgICBpZiAoQF9tb2RlbCBpbnN0YW5jZW9mIGhhbmRsZXIubW9kZWxUeXBlKVxuICAgICAgICBAaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlclxuICAgICAgICBicmVha1xuICAgIGlmIChAaGFuZGxlciA9PSBudWxsKVxuICAgICAgIyBpdCBzaG91bGRuJ3QgaGFwcGVuZFxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwianNvblByb2Nlc3MsIGltcG9zaWJsZSB0byBmaW5kIGFuIGhhbmRsZSBmb3IgI3tAX21vZGVsLmNvbnN0cnVjdG9yLm5hbWV9XCIpXG5cbiAgICBAX29uQ2hhbmdlID0gW11cbiAgICBAX29uTG9jYWxDaGFuZ2UgPSBbXVxuICAgIEBfb25DaGlsZENoYW5nZSA9IFtdXG5cbiAgICAjIHdhaXQgcmR5XG4gICAgQF9pc19yZHkgPSBAX3VwZGF0ZSgpXG5cbiAgIyMjKlxuICAqIFN0YXRpYyBNZXRob2QgdG8gY3JlYXRlIGEgSnNvblByb2Nlc3NcbiAgKiBAcGFyYW0gbW9kZWwgW01vZGVsXSBTcGluYWxDb3JlIG1vZGVsIHRvIGZvbGxvd1xuICAqIEBwYXJhbSBtYXhfZGVwdGggW051bWJlciA9IG51bGxdIHRoZSBtYXggZGVwdGggZGVmYXVsdCBpcyBkZXB0aCArIDJcbiAgKiBAcGFyYW0gbG9hZF9wdHIgW0Jvb2wgPSBmYWxzZV0gdG8gbG9hZCBvciBub3QgdGhlIHB0clxuICAqIEBwYXJhbSBkZXB0aCBbTnVtYmVyID0gMF0gY3VycmVudCBkZXB0aCBkZWZhdWx0IGF0IDBcbiAgKiBAcmV0dXJucyBbUHJvbWlzZV0gdGhlIGBfanNvbmAgYXR0cmlidXRlIGlzIHJldHVybmVkIHdoZW4gcmVzb2x2ZWRcbiAgIyMjXG4gIEBjcmVhdGVfSnNvblByb2Nlc3M6IChtb2RlbCwgbWF4X2RlcHRoID0gbnVsbCwgbG9hZF9wdHIgPSBmYWxzZSwgZGVwdGggPSAwKSAtPlxuICAgIGRlcHRoICs9IDFcbiAgICBpZiBub3QgbWF4X2RlcHRoXG4gICAgICBtYXhfZGVwdGggPSBkZXB0aCArIDJcbiAgICAjIHdhaXQgbW9kZWwgcmR5XG4gICAgcmV0dXJuIEdfcm9vdC5Kc29uUHJvY2Vzcy5fd2FpdF9tb2RlbF9zeW5jX3NlcnZlcihtb2RlbCkudGhlbigoKSAtPlxuICAgICAgaWYgKHR5cGVvZiBHX3Jvb3QuSnNvblByb2Nlc3MuX2dldEpzb25Qcm9jZXNzKG1vZGVsKSBpcyBcInVuZGVmaW5lZFwiKVxuICAgICAgICBHX3Jvb3QuSnNvblByb2Nlc3MuX0pzb25Qcm9jZXNzW21vZGVsLl9zZXJ2ZXJfaWRdID1cbiAgICAgICAgICBuZXcgR19yb290Lkpzb25Qcm9jZXNzKG1vZGVsLCBtYXhfZGVwdGgsIGxvYWRfcHRyLCBkZXB0aClcbiAgICAgIHJldHVybiBHX3Jvb3QuSnNvblByb2Nlc3MuX2dldEpzb25Qcm9jZXNzKG1vZGVsKS5faXNfcmR5XG4gICAgKVxuXG4gICMjIypcbiAgKiBTdGF0aWMgTWV0aG9kIHRvIGNyZWF0ZSBhIEpzb25Qcm9jZXNzXG4gICogQHBhcmFtIHNlcnZlcl9pZCBbTnVtYmVyXSBTcGluYWxDb3JlIG1vZGVsIHRvIGZvbGxvd1xuICAqIEBwYXJhbSBtYXhfZGVwdGggW051bWJlciA9IG51bGxdIHRoZSBtYXggZGVwdGggZGVmYXVsdCBpcyBkZXB0aCArIDJcbiAgKiBAcGFyYW0gbG9hZF9wdHIgW0Jvb2wgPSBmYWxzZV0gdG8gbG9hZCBvciBub3QgdGhlIHB0clxuICAqIEBwYXJhbSBkZXB0aCBbTnVtYmVyID0gMF0gY3VycmVudCBkZXB0aCBkZWZhdWx0IGF0IDBcbiAgKiBAcmV0dXJucyBbUHJvbWlzZV0gdGhlIGBfanNvbmAgYXR0cmlidXRlIGlzIHJldHVybmVkIHdoZW4gcmVzb2x2ZWRcbiAgIyMjXG4gIEBjcmVhdGVfSnNvblByb2Nlc3NfYnlfc2VydmVyX2lkOiAoc2VydmVyX2lkLCBtYXhfZGVwdGgsIGxvYWRfcHRyLCBkZXB0aCkgLT5cbiAgICBHX3Jvb3QuSnNvblByb2Nlc3MuY3JlYXRlX0pzb25Qcm9jZXNzKEZpbGVTeXN0ZW0uX29iamVjdHNbc2VydmVyX2lkXSwgX21heF9kZXB0aCxcbiAgICBsb2FkX3B0ciwgZGVwdGgpXG5cbiAgIyMjKlxuICAqIEFkZCBhIGNhbGxiYWNrIHRvIGNhbGwgb24gTW9kZWwgY2hhbmdlIChpdHNlbGYgYW5kIGNoaWxkKVxuICAqIEBwYXJhbSB7T2JqfSBqc29uIHRoZSBKc29uIG9yIGEgY2hpbGQgb2J0YWluZWQgdmlhIGNyZWF0ZV9Kc29uUHJvY2VzcyBNVVNUIGhhdmUgYSBgX3NlcnZlcl9pZGBcbiAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiB0aGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkXG4gICogQHJldHVybnMge0Z1bmN0aW9ufSBjYWxsIGl0IHRvIHVucmVnaXN0ZXIgdGhlIGNhbGxiYWNrXG4gICogQGFwaSBwcml2YXRlXG4gICMjI1xuICBAc2V0T25DaGFuZ2U6IChqc29uLCBjYikgLT5cbiAgICB0YXJnZXRKc29uUHJvY2VzcyA9IEdfcm9vdC5Kc29uUHJvY2Vzcy5fZ2V0SnNvblByb2Nlc3MoanNvbilcbiAgICBHX3Jvb3QuSnNvblByb2Nlc3MuX3JlZ2lzdGVyQ2FsbGJhY2sodGFyZ2V0SnNvblByb2Nlc3MuX29uQ2hhbmdlLCBjYilcbiAgIyMjKlxuICAqIEFkZCBhIGNhbGxiYWNrIHRvIGNhbGwgb24gTW9kZWwgY2hhbmdlIChpdHNlbGYgb25seSlcbiAgKiBAcGFyYW0ge09ian0ganNvbiB0aGUgSnNvbiBvciBhIGNoaWxkIG9idGFpbmVkIHZpYSBjcmVhdGVfSnNvblByb2Nlc3MgTVVTVCBoYXZlIGEgYF9zZXJ2ZXJfaWRgXG4gICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgdGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZFxuICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gY2FsbCBpdCB0byB1bnJlZ2lzdGVyIHRoZSBjYWxsYmFja1xuICAjIyNcbiAgQHNldE9uTG9jYWxDaGFuZ2U6IChqc29uLCBjYikgLT5cbiAgICB0YXJnZXRKc29uUHJvY2VzcyA9IEdfcm9vdC5Kc29uUHJvY2Vzcy5fZ2V0SnNvblByb2Nlc3MoanNvbilcbiAgICBHX3Jvb3QuSnNvblByb2Nlc3MuX3JlZ2lzdGVyQ2FsbGJhY2sodGFyZ2V0SnNvblByb2Nlc3MuX29uTG9jYWxDaGFuZ2UsIGNiKVxuICAjIyMqXG4gICogQWRkIGEgY2FsbGJhY2sgdG8gY2FsbCBvbiBNb2RlbCBjaGFuZ2UgKGNoaWxkIG9ubHkpXG4gICogQHBhcmFtIHtPYmp9IGpzb24gdGhlIEpzb24gb3IgYSBjaGlsZCBvYnRhaW5lZCB2aWEgY3JlYXRlX0pzb25Qcm9jZXNzIE1VU1QgaGF2ZSBhIGBfc2VydmVyX2lkYFxuICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWRcbiAgKiBAcmV0dXJucyB7RnVuY3Rpb259IGNhbGwgaXQgdG8gdW5yZWdpc3RlciB0aGUgY2FsbGJhY2tcbiAgIyMjXG4gIEBzZXRPbkNoaWxkQ2hhbmdlOiAoanNvbiwgY2IpIC0+XG4gICAgdGFyZ2V0SnNvblByb2Nlc3MgPSBHX3Jvb3QuSnNvblByb2Nlc3MuX2dldEpzb25Qcm9jZXNzKGpzb24pXG4gICAgR19yb290Lkpzb25Qcm9jZXNzLl9yZWdpc3RlckNhbGxiYWNrKHRhcmdldEpzb25Qcm9jZXNzLl9vbkNoaWxkQ2hhbmdlLCBjYilcblxuICBAX2dldEpzb25Qcm9jZXNzOiAob2JqKSAtPlxuICAgIGlmIG9iaiAmJiBvYmouX3NlcnZlcl9pZFxuICAgICAgcmV0dXJuIEdfcm9vdC5Kc29uUHJvY2Vzcy5fSnNvblByb2Nlc3NbbW9kZWwuX3NlcnZlcl9pZF1cbiAgICB0aHJvdyBuZXcgRXJyb3IgKFwiX2dldEpzb25Qcm9jZXNzIHBhcmFtYWV0ZXIgbXVzdCBoYXZlIGEgJ19zZXJ2ZXJfaWQnIGF0dHJpYnV0ZVwiKVxuXG4gIF91cGRhdGU6IC0+XG4gICAgaWYgKEBfbWF4X2RlcHRoIDwgQF9kZXB0aClcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICBfc2VydmVyX2lkOiBAX2pzb24uX3NlcnZlcl9pZFxuICAgICAgICBfY29uc3RydWN0b3JfbmFtZTogQF9tb2RlbC5jb25zdHJ1Y3Rvci5uYW1lLFxuICAgICAgfSlcbiAgICByZXR1cm4gQGhhbmRsZXIuY2FsbChAKVxuXG5cblxuICAjIyMqXG4gICogUmVnaXN0ZXIgYSBjdXN0b20gaGFuZGxlciwgY2hlY2sgW0xzdF0oL3NyYy9Nb2RlbEhhbmRsZXIvTHN0LmNvZmZlZSlcbiAgKiBvciBbTW9kZWxdKC9zcmMvTW9kZWxIYW5kbGVyL01vZGVsLmNvZmZlZSkgaGFuZGxlclxuICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kbGVyIHRoZSBoYW5kbGVyXG4gICpcbiAgKmBgYGpzXG4gICogLy8gZXhhbXBsZSBmb3IgT2JqXG4gICoge1xuICAqICAgbW9kZWxUeXBlOiBHX3Jvb3QuT2JqLCAvLyBbTW9kZWxdIFRoZSBkZWNsYXJhdGlvbiBvZiB0aGUgTW9kZWxcbiAgKiAgIG1vZGVsTmFtZTogXCJPYmpcIiwgLy8gW1N0cmluZ10gVGhlIGNvbnN0cnVjdG9yIG5hbWUgb2YgdGhlIE1vZGVsXG4gICogICBwcm9yaXR5OiAxLCAvLyBbTnVtYmVyXSB0aGUgZGVmYXV0IGhhbmRsZXIgZXhlY3V0ZWQgaXMgdGhlIG9uZSB3aXRoIHRoZSBoaWdoaWVzdCBwcmlvcml0eVxuICAqXG4gICogICAvLyBbRnVuY3Rpb25dIFRoZSBoYW5kbGVyIGl0c2VsZiByZXR1cm4gYSBwcm9taXNlIHdpdGggdGhlIF9qc29uIGluIHRoZSByZXNvbHZlXG4gICogICBoYW5kbGVyOiBmdW5jdGlvbigpIHtcbiAgKiAgICAgdGhpcy5fanNvbi5kYXRhID0gdGhpcy5fbW9kZWwuX2RhdGFcbiAgKiAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9qc29uKVxuICAqICAgICB9XG4gICogfVxuICAqYGBgICAjIyNcbiAgQHJlZ2lzdGVySGFuZGxlcjogKGhhbmRsZXIpIC0+XG4gICAgR19yb290Lkpzb25Qcm9jZXNzLl90eXBlX2hhbmRsZXIucHVzaChoYW5kbGVyKVxuICAgIEdfcm9vdC5Kc29uUHJvY2Vzcy5fdHlwZV9oYW5kbGVyLnNvcnQoR19yb290Lkpzb25Qcm9jZXNzLl9yZWdpc3Rlcl9zb3J0KVxuICBAX3JlZ2lzdGVyX3NvcnQ6IChhLCBiKSAtPlxuICAgIHJldHVybiBiLnByb3JpdHkgLSBhLnByb3JpdHlcblxuICBAX2Fzc2lnbldpdGhLZXk6IChfZGF0YSwgbW9kZWxfa2V5LCBfbW9kZWwpIC0+XG4gICAgcmV0dXJuIEdfcm9vdC5Kc29uUHJvY2Vzcy5fYXNzaWduV2l0aE1vZGVsLmNhbGwoQCwgX2RhdGEsIG1vZGVsX2tleSwgX21vZGVsW21vZGVsX2tleV0pXG4gIEBfYXNzaWduV2l0aE1vZGVsOiAoX2RhdGEsIG1vZGVsX2tleSwgX21vZGVsKSAtPlxuICAgIHJldHVybiBHX3Jvb3QuSnNvblByb2Nlc3NcbiAgICAgIC5jcmVhdGVfSnNvblByb2Nlc3MoX21vZGVsLCBAX21heF9kZXB0aCxcbiAgICAgIEBfbG9hZF9wdHIsIEBfZGVwdGgpLnRoZW4oXG4gICAgICAgIChjaGlsZCkgLT5cbiAgICAgICAgICBfZGF0YVttb2RlbF9rZXldID0gY2hpbGRcbiAgICAgICAgICByZXR1cm4gX2RhdGFcbiAgICAgIClcblxuICBAX2Fzc2lnblB1c2g6IChfanNvbiwgX21vZGVsKSAtPlxuICAgIHJldHVybiBHX3Jvb3QuSnNvblByb2Nlc3NcbiAgICAgIC5jcmVhdGVfSnNvblByb2Nlc3MoX21vZGVsLCBAX21heF9kZXB0aCxcbiAgICAgIEBfbG9hZF9wdHIsIEBfZGVwdGgpXG4gICAgICAudGhlbihcbiAgICAgICAgKGNoaWxkKSAtPlxuICAgICAgICAgIF9qc29uLmRhdGEucHVzaChjaGlsZClcbiAgICAgICAgICByZXR1cm4gX2pzb25cbiAgICAgIClcblxuICBvbmNoYW5nZTogLT5cbiAgICAjIF91cGRhdGUganNvblxuICAgIGlmIChAX21vZGVsLmhhc19iZWVuX2RpcmVjdGx5X21vZGlmaWVkKCkpXG4gICAgICAgIEBfdXBkYXRlKCkudGhlbigoKSA9PlxuICAgICAgICAgIEdfcm9vdC5Kc29uUHJvY2Vzcy5fY2FsbGJhY2tJbkFycmF5KEBfb25Mb2NhbENoYW5nZSwgQF9qc29uKVxuICAgICAgICAgIEdfcm9vdC5Kc29uUHJvY2Vzcy5fY2FsbGJhY2tJbkFycmF5KEBfb25DaGFuZ2UsIEBfanNvbilcbiAgICAgICAgKVxuICAgIGVsc2VcbiAgICAgIEdfcm9vdC5Kc29uUHJvY2Vzcy5fY2FsbGJhY2tJbkFycmF5KEBfb25DaGlsZENoYW5nZSwgQF9qc29uKVxuICAgICAgR19yb290Lkpzb25Qcm9jZXNzLl9jYWxsYmFja0luQXJyYXkoQF9vbkNoYW5nZSwgQF9qc29uKVxuXG4gIEBfY2FsbGJhY2tJbkFycmF5OiAoYXJyLCBqc29uKSAtPlxuICAgIGZvciBvYmogaW4gYXJyXG4gICAgICBvYmouZnVuYyhqc29uKVxuXG4gIEBfcmVnaXN0ZXJDYWxsYmFjazogKGFyciwgY2IpIC0+XG4gICAgb2JqID0ge1xuICAgICAgaWQ6IEdfcm9vdC5Kc29uUHJvY2Vzcy5fcmVnaXN0ZXJJRCsrXG4gICAgICBmdW5jOiBjYlxuICAgIH1cbiAgICByZXR1cm4gKCgpIC0+XG4gICAgICBpZHggPSBhcnIuaW5kZXhPZihvYmopXG4gICAgICBpZiBpZHggIT0gLTFcbiAgICAgICAgYXJyLnNwbGljZShpZHgsIDEpXG4gICAgKVxuICBAX3dhaXRfbW9kZWxfc3luY19zZXJ2ZXJfbG9vcDogKG1vZGVsLCByZXNvbHZlKSAtPlxuICAgIGlmICh0eXBlb2YgbW9kZWwuX3NlcnZlcl9pZCA9PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBGaWxlU3lzdGVtLl90bXBfb2JqZWN0c1ttb2RlbC5fc2VydmVyX2lkXSAhPSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBGaWxlU3lzdGVtLl9vYmplY3RzW21vZGVsLl9zZXJ2ZXJfaWRdID09ICd1bmRlZmluZWQnKVxuICAgICAgc2V0VGltZW91dChcbiAgICAgICAgKCkgLT4gR19yb290Lkpzb25Qcm9jZXNzLl93YWl0X21vZGVsX3N5bmNfc2VydmVyX2xvb3AobW9kZWwsIHJlc29sdmUpXG4gICAgICAsIDIwMClcbiAgICBlbHNlXG4gICAgICByZXNvbHZlKClcblxuICBAX3dhaXRfbW9kZWxfc3luY19zZXJ2ZXI6IChtb2RlbCkgLT5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpIC0+XG4gICAgICBHX3Jvb3QuSnNvblByb2Nlc3MuX3dhaXRfbW9kZWxfc3luY19zZXJ2ZXJfbG9vcChtb2RlbCwgcmVzb2x2ZSlcbiAgICApXG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEpzb25Qcm9jZXNzLFxuICBjcmVhdGVfSnNvblByb2Nlc3M6IEpzb25Qcm9jZXNzLmNyZWF0ZV9Kc29uUHJvY2VzcyxcbiAgZGVmYXVsdDogSnNvblByb2Nlc3MuY3JlYXRlX0pzb25Qcm9jZXNzXG59Il0sInNvdXJjZVJvb3QiOiIuLiJ9
//# sourceURL=/home/laurent/share_to_send/modules/spinal-process-jsonprocess/src/jsonProcess.coffee