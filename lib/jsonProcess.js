"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Generated by CoffeeScript 2.3.1
(function () {
  // Copyright 2015 SpinalCom - www.spinalcom.com

  // This file is part of SpinalCore.

  // Please read all of the following terms and conditions
  // of the Free Software license Agreement ("Agreement")
  // carefully.

  // This Agreement is a legally binding contract between
  // the Licensee (as defined below) and SpinalCom that
  // sets forth the terms and conditions that govern your
  // use of the Program. By installing and/or using the
  // Program, you agree to abide by all the terms and
  // conditions stated or referenced herein.

  // If you do not agree to abide by these terms and
  // conditions, do not demonstrate your acceptance and do
  // not install or use the Program.

  // You should have received a copy of the license along
  // with this file. If not, see
  // <http://resources.spinalcom.com/licenses.pdf>.
  var G_root;

  G_root = typeof window === "undefined" ? global : window;

  require("spinal-core-connectorjs");

  G_root.JsonProcess = function () {
    var JsonProcess = function (_G_root$Process) {
      _inherits(JsonProcess, _G_root$Process);

      function JsonProcess(model, max_depth, load_ptr, depth) {
        _classCallCheck(this, JsonProcess);

        var handler, i, len, ref;

        var _this = _possibleConstructorReturn(this, (JsonProcess.__proto__ || Object.getPrototypeOf(JsonProcess)).call(this, model, false));

        _this._model = model;
        _this._depth = depth;
        _this._max_depth = max_depth;
        _this._load_ptr = load_ptr;
        _this._json = {
          _server_id: model._server_id,
          _constructor_name: model.constructor.name,
          data: null
        };
        _this.handler = null;
        ref = G_root.JsonProcess._type_handler;
        for (i = 0, len = ref.length; i < len; i++) {
          handler = ref[i];
          if (_this._model instanceof handler.modelType) {
            _this.handler = handler.handler;
            break;
          }
        }
        if (_this.handler === null) {
          // it shouldn't happend
          throw new Error("jsonProcess, imposible to find an handle for " + _this._model.constructor.name);
        }
        _this._onChange = [];
        _this._onLocalChange = [];
        _this._onChildChange = [];
        // wait rdy
        _this._is_rdy = _this.update();
        return _this;
      }

      _createClass(JsonProcess, [{
        key: "setOnChange",
        value: function setOnChange(cb) {
          return G_root.JsonProcess._registerCallback(this._onChange, cb);
        }
      }, {
        key: "setOnLocalChange",
        value: function setOnLocalChange(cb) {
          return G_root.JsonProcess._registerCallback(this._onLocalChange, cb);
        }
      }, {
        key: "setOnChildChange",
        value: function setOnChildChange(cb) {
          return G_root.JsonProcess._registerCallback(this._onChildChange, cb);
        }
      }, {
        key: "update",
        value: function update() {
          if (this._max_depth < this._depth) {
            return Promise.resolve({
              _server_id: this._json._server_id,
              _constructor_name: this._model.constructor.name
            });
          }
          return this.handler.call(this);
        }
      }, {
        key: "onchange",
        value: function onchange() {
          var _this2 = this;

          // update json
          if (this._model.has_been_directly_modified()) {
            return this.update().then(function () {
              G_root.JsonProcess._callbackInArray(_this2._onLocalChange);
              return G_root.JsonProcess._callbackInArray(_this2._onChange);
            });
          } else {
            G_root.JsonProcess._callbackInArray(this._onChildChange);
            return G_root.JsonProcess._callbackInArray(this._onChange);
          }
        }
      }], [{
        key: "create_JsonProcess",
        value: function create_JsonProcess(model) {
          var max_depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var load_ptr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          var depth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

          depth += 1;
          if (!max_depth) {
            max_depth = depth + 2;
          }
          // wait model rdy
          return G_root.JsonProcess._wait_model_sync_server(model).then(function () {
            if (typeof G_root.JsonProcess._JsonProcess[model._server_id] === "undefined") {
              G_root.JsonProcess._JsonProcess[model._server_id] = new G_root.JsonProcess(model, max_depth, load_ptr, depth);
            }
            return G_root.JsonProcess._JsonProcess[model._server_id]._is_rdy;
          });
        }
      }, {
        key: "create_JsonProcess_by_server_id",
        value: function create_JsonProcess_by_server_id(server_id, max_depth, load_ptr, depth) {
          return G_root.JsonProcess.create_JsonProcess(FileSystem._objects[server_id], _max_depth, load_ptr, depth);
        }
      }, {
        key: "_register_handler",
        value: function _register_handler(handler) {
          G_root.JsonProcess._type_handler.push(handler);
          return G_root.JsonProcess._type_handler.sort(G_root.JsonProcess._register_sort);
        }
      }, {
        key: "_register_sort",
        value: function _register_sort(a, b) {
          return b.prority - a.prority;
        }
      }, {
        key: "_assignWithKey",
        value: function _assignWithKey(_data, model_key, _model) {
          return G_root.JsonProcess._assignWithModel.call(this, _data, model_key, _model[model_key]);
        }
      }, {
        key: "_assignWithModel",
        value: function _assignWithModel(_data, model_key, _model) {
          return G_root.JsonProcess.create_JsonProcess(_model, this._max_depth, this._load_ptr, this._depth).then(function (child) {
            _data[model_key] = child;
            return _data;
          });
        }
      }, {
        key: "_assignPush",
        value: function _assignPush(_json, _model) {
          return G_root.JsonProcess.create_JsonProcess(_model, this._max_depth, this._load_ptr, this._depth).then(function (child) {
            _json.data.push(child);
            return _json;
          });
        }
      }, {
        key: "_callbackInArray",
        value: function _callbackInArray(arr) {
          var i, len, obj, results;
          results = [];
          for (i = 0, len = arr.length; i < len; i++) {
            obj = arr[i];
            results.push(obj.func());
          }
          return results;
        }
      }, {
        key: "_registerCallback",
        value: function _registerCallback(arr, cb) {
          var obj;
          obj = {
            id: G_root.JsonProcess._registerID++,
            func: cb
          };
          return function () {
            var idx;
            idx = arr.indexOf(obj);
            if (idx !== -1) {
              return arr.splice(idx, 1);
            }
          };
        }
      }, {
        key: "_wait_model_sync_server_loop",
        value: function _wait_model_sync_server_loop(model, resolve) {
          if (typeof model._server_id === 'undefined' || typeof FileSystem._tmp_objects[model._server_id] !== 'undefined' || typeof FileSystem._objects[model._server_id] === 'undefined') {
            return setTimeout(function () {
              return G_root.JsonProcess._wait_model_sync_server_loop(model, resolve);
            }, 200);
          } else {
            return resolve();
          }
        }
      }, {
        key: "_wait_model_sync_server",
        value: function _wait_model_sync_server(model) {
          return new Promise(function (resolve) {
            return G_root.JsonProcess._wait_model_sync_server_loop(model, resolve);
          });
        }
      }]);

      return JsonProcess;
    }(G_root.Process);

    ;

    JsonProcess._type_handler = [];

    JsonProcess._JsonProcess = [];

    JsonProcess._registerID = 0;

    return JsonProcess;
  }.call(this);

  module.exports = {
    JsonProcess: JsonProcess,
    default: JsonProcess.create_JsonProcess
  };
}).call(undefined);
//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/home/laurent/share_to_send/modules/spinal-process-jsonprocess/src/jsonProcess.coffee